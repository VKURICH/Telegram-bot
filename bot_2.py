import logging
import parser_2
import config
from aiogram import Bot, Dispatcher, executor, types
logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

# url —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å
url_hot = 'https://www.povarenok.ru/recipes/category/6/~'
url_soup = 'https://www.povarenok.ru/recipes/category/2/~'
url_salad = 'https://www.povarenok.ru/recipes/category/12/~'
url_snacks = 'https://www.povarenok.ru/recipes/category/15/~'
url_bake = 'https://www.povarenok.ru/recipes/category/25/~'
url_dessert = 'https://www.povarenok.ru/recipes/category/30/~'
url_last = 'https://www.povarenok.ru/recipes/category/25/~'
count = 1
pars_tab = []

keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(types.KeyboardButton('—Ä–µ—Ü–µ–ø—Ç—ã'), types.KeyboardButton('—Ç–æ —á—Ç–æ —É –≤–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ'))

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω, –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ãx —Ä–µ—Ü–µ–ø—Ç–æ–≤)".format(message.from_user), reply_markup=keyboard)

@dp.message_handler(content_types=['text'])
async def lalala(message):
    global pars_tab
    keyboard2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard2.add(types.KeyboardButton('ü•ß–í—ã–ø–µ—á–∫–∞'), types.KeyboardButton('üç≤–ë—É–ª—å–æ–Ω—ã –∏ —Å—É–ø—ã'),  types.KeyboardButton('üç∞–î–µ—Å–µ—Ä—Ç—ã'))
    keyboard2.add(types.KeyboardButton('üç§–ó–∞–∫—É—Å–∫–∏'), types.KeyboardButton('ü•ò–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞'), types.KeyboardButton('ü•óC–∞–ª–∞—Ç—ã'))
    keyboard2.add(types.KeyboardButton('–Ω–∞–∑–∞–¥'))
    keyboard3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard3.add(types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë'), types.KeyboardButton('—Ä–µ—Ü–µ–ø—Ç—ã'))
    list_pages = []
    for i in range(1,16):
        list_pages.append(str(i))
    if message.chat.type == 'private':
        global count
        if message.text == '—Ä–µ—Ü–µ–ø—Ç—ã':
            count = 1
            await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ—Ç–µ–≥–æ—Ä–∏–π",
                                 reply_markup=keyboard2)
        elif message.text == '—Ç–æ —á—Ç–æ —É –≤–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ':
            await message.answer("—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ)")
        elif message.text == '–Ω–∞–∑–∞–¥':
            await message.answer("–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 reply_markup=keyboard)
        elif message.text == 'üç≤–ë—É–ª—å–æ–Ω—ã –∏ —Å—É–ø—ã':
            await message.answer(categories(url_soup), reply_markup=keyboard3)
            new_url(url_soup)
        elif message.text == 'ü•ò–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞':
            await message.answer(categories(url_hot), reply_markup=keyboard3)
            new_url(url_hot)
        elif message.text == 'ü•óC–∞–ª–∞—Ç—ã':
            await message.answer(categories(url_salad), reply_markup=keyboard3)
            new_url(url_salad)
        elif message.text == 'üç§–ó–∞–∫—É—Å–∫–∏':
            await message.answer(categories(url_snacks), reply_markup=keyboard3)
            new_url(url_snacks)
        elif message.text == 'ü•ß–í—ã–ø–µ—á–∫–∞':
            await message.answer(categories(url_bake), reply_markup=keyboard3)
            new_url(url_bake)
        elif message.text == 'üç∞–î–µ—Å–µ—Ä—Ç—ã':
            await message.answer(categories(url_dessert), reply_markup=keyboard3)
            new_url(url_dessert)
        elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë':
            count += 1
            list_titles, pars_tab = parser_2.parser(url_last, count)
            text_answer = '–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ: \n\n'
            for i in range(len(list_titles)):
                text_answer += str(i + 1) + ') ' + list_titles[i] + '\n'
            await message.answer(text_answer, reply_markup=keyboard3)
        elif message.text in list_pages:
            await bot.send_photo(
                message.from_user.id,
                pars_tab[int(message.text)-1]['dish_img'],
                caption='\n' +'üç≥'+ pars_tab[int(message.text)-1]['caption'] + '\n' + pars_tab[int(message.text)-1]['info-item'] + '\n\n' + 'üìú–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é:' + pars_tab[int(message.text)-1]['link_product']
            )
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –∑–∞–ø—Ä–æ—Å!!!')

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
def categories(url):
    global pars_tab
    text_answer = '–í—Å—ë —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å: \n\n'
    list_titles, pars_tab = parser_2.parser(url, 1)
    for i in range(len(list_titles)):
        text_answer += str(i + 1) + ') ' + list_titles[i] + '\n'
    return text_answer

def new_url(url):
    global url_last
    url_last = url


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
